Description: archive_read: fix handling of sparse files
 If a file ends with a sparse "hole" that is larger than buffer supplied
 to archive_read(), then archive_read() will return prematurely because
 archive_read_data_block() will return ARHCIVE_EOF as there is no more
 "real" data. We can fix that by not trying to refill data buffer until
 we exhaust the hole range.
 .
 Fixes libarchive#1194
Origin: upstream, https://github.com/libarchive/libarchive/pull/1218/commits/aa48bfac0f4ede8a6a4dfa545ad91684b41a9285
Bug: https://github.com/libarchive/libarchive/issues/1194
Author: Dmitry Torokhov <dtor@chromium.org>
Last-Update: 2019-09-20

--- a/libarchive/archive_read.c
+++ b/libarchive/archive_read.c
@@ -844,7 +844,8 @@
 	dest = (char *)buff;
 
 	while (s > 0) {
-		if (a->read_data_remaining == 0) {
+		if (a->read_data_offset == a->read_data_output_offset &&
+		    a->read_data_remaining == 0) {
 			read_buf = a->read_data_block;
 			a->read_data_is_posix_read = 1;
 			a->read_data_requested = s;
